Ans:1)

import pandas as pd
import numpy as np

def generate_car_matrix(dataset_path):
   
    df = pd.read_csv(dataset_path)
    result_df = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)
    result_df.values[[range(len(result_df))]*2] = 0
    return result_df
result_dataframe = generate_car_matrix('C:\\Users\\anura\\OneDrive\\Desktop\\submissions\\DATASHEET1.CSV')
print(result_dataframe)


Ans:2)

import pandas as pd

def get_type_count(df):
   
    df['car_type'] = pd.cut(df['car'], bins=[float('-inf'), 15, 25, float('inf')],
                            labels=['low', 'medium', 'high'], right=False)

    type_counts = df['car_type'].value_counts().to_dict()

    sorted_type_counts = dict(sorted(type_counts.items()))

    return sorted_type_counts

df = pd.read_csv('C:\\Users\\anura\\OneDrive\\Desktop\\submissions\\DATASHEET1.CSV')

result_dict = get_type_count(df)
print(result_dict)


Ans:3)

import pandas as pd

def get_bus_indexes(df):
    
    mean_bus_value = df['bus'].mean()
    
    bus_indexes = df[df['bus'] > 2 * mean_bus_value].index.tolist()

    bus_indexes.sort()

    return bus_indexes

df = pd.read_csv('C:\\Users\\anura\\OneDrive\\Desktop\\submissions\\DATASHEET1.CSV')

result_indexes = get_bus_indexes(df)
print(result_indexes)


Ans:4)

import pandas as pd

def filter_routes(df):
    
    route_avg_truck = df.groupby('route')['truck'].mean()

    selected_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    selected_routes.sort()

    return selected_routes
df = pd.read_csv('C:\\Users\\anura\\OneDrive\\Desktop\\submissions\\DATASHEET1.CSV')

result_routes = filter_routes(df)
print(result_routes)


Ans:5)

import pandas as pd

def multiply_matrix(input_df):
    
    modified_df = input_df.copy()

    modified_df[modified_df > 20] *= 0.75
    modified_df[(modified_df <= 20) & (modified_df > 0)] *= 1.25  # Ensure values are greater than0

    modified_df = modified_df.round(1)

    return modified_df

result_dataframe_modified = multiply_matrix(result_dataframe)
print(result_dataframe_modified)


Ans:6)

import pandas as pd
from datetime import datetime, timedelta

def check_time_completeness(df):
    
    df['timestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])    

    full_day_coverage = df.groupby(['id', 'id_2'])['timestamp'].apply(
        lambda group: (group.max() - group.min()) == timedelta(days=1)
    )

    all_days_spanned = df.groupby(['id', 'id_2'])['timestamp'].apply(
        lambda group: set(group.dt.dayofweek.unique()) == set(range(7))
    )

    time_completeness_series = full_day_coverage & all_days_spanned

    return time_completeness_series
df = pd.read_csv('C:\\Users\\anura\\OneDrive\\Desktop\\submissions\\DATASHEET1.CSV')
result_series = check_time_completeness(df)
print(result_series)

